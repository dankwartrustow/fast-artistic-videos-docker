#!/usr/bin/env node

const {spawn} = require('child_process')
const glob = require('glob')
// https://www.npmjs.com/package/yargs
const yargs = require('yargs')
const VERSION = require('./package.json').version

const about = () => {
    console.log(`\nfav v${VERSION}`)
    console.log(`\nTo stylize a video: 
    $ fav stylize ./path/to/video.mp4 model_file_name.t7`)
    console.log(`\nTo get a list of pretrained models: 
    $ fav list-models
    `)
}

yargs
    .command('$0', 'about', () => {}, about)
    .command('help', 'about', () => {}, about)
    .command('list-models', 'list available pre-trained style models', () => {}, (argv) => {
        const models = glob.sync('/fast-artistic-videos/models/*.t7')
        console.log(models)
    })
    .command('stylize', 'apply style to a video', (yargs) => {
        yargs.usage('stylize <video_file_in_cwd> <model_file_name>')
    }, (argv) => {
        const proc = spawn(
            'bash',
            ['./stylizeVideo_flownet.sh', `/io/${argv._[1]}`, `./models/${argv._[2]}`],
            {cwd: '/fast-artistic-videos'}
        )
        // accept defaults for all interactive prompts
        // TODO expose these options
        proc.stdin.write('\n') // which gpu
        proc.stdin.write('\n') // which backend
        proc.stdin.write('\n') // resolution
        proc.stdin.write('\n') // overwrite existing
        proc.stdout.on('data', (str) => console.log(str.toString()))
        proc.stderr.on('data', (str) => console.error(str.toString()))
        proc.on('close', (code) => {
            console.log(`child process exited with code ${code}`)
            // TODO clean up based on flag
        })
    })
    .argv
